import React from "react";import { cn } from "../lib/utils";import { AlertCircle, CheckCircle2, Info, AlertTriangle, X, Filter, Search, ChevronRight, ExternalLink, Copy } from "lucide-react";interface ValidationMessage { id: string; type: "error" | "warning" | "info"; message: string; path?: string; line?: number; column?: number; source?: string; }interface ValidationPanelProps { messages?: ValidationMessage[]; className?: string; }type FilterType = "all" | "errors" | "warnings" | "info";export const ValidationPanel: React.FC<ValidationPanelProps> = ({ messages = [], className }) => { const [filter, setFilter] = React.useState<FilterType>("all"); const [searchTerm, setSearchTerm] = React.useState(""); const [expandedMessages, setExpandedMessages] = React.useState<string[]>([]); const toggleMessage = (id: string) => { setExpandedMessages(prev => prev.includes(id) ? prev.filter(m => m !== id) : [...prev, id]); }; const filteredMessages = React.useMemo(() => { let filtered = [...messages]; if (filter !== "all") { filtered = filtered.filter(msg => msg.type === filter); } if (searchTerm) { const term = searchTerm.toLowerCase(); filtered = filtered.filter(msg => msg.message.toLowerCase().includes(term) || msg.path?.toLowerCase().includes(term) || msg.source?.toLowerCase().includes(term)); } return filtered; }, [messages, filter, searchTerm]); const stats = React.useMemo(() => ({ errors: messages.filter(m => m.type === "error").length, warnings: messages.filter(m => m.type === "warning").length, info: messages.filter(m => m.type === "info").length }), [messages]); const getMessageIcon = (type: ValidationMessage["type"]) => { switch (type) { case "error": return <AlertCircle className="h-4 w-4 text-destructive" />; case "warning": return <AlertTriangle className="h-4 w-4 text-warning" />; case "info": return <Info className="h-4 w-4 text-info" />; } }; if (messages.length === 0) { return ( <div className={cn("flex items-center justify-center p-8", className)}> <div className="text-center space-y-2"> <CheckCircle2 className="h-8 w-8 text-success mx-auto" /> <h3 className="font-medium">No validation issues found</h3> <p className="text-sm text-muted-foreground">Your API specification looks good!</p> </div> </div> ); } return ( <div className={cn("flex flex-col h-full", className)}> <div className="flex items-center justify-between p-4 border-b"> <div className="flex items-center gap-4"> <button onClick={() => setFilter("all")} className={cn( "text-sm transition-colors", filter === "all" ? "text-foreground" : "text-muted-foreground hover:text-foreground" )} > All ({messages.length}) </button> <button onClick={() => setFilter("errors")} className={cn( "flex items-center gap-1 text-sm transition-colors", filter === "errors" ? "text-destructive" : "text-muted-foreground hover:text-destructive" )} > <AlertCircle className="h-3 w-3" /> Errors ({stats.errors}) </button> <button onClick={() => setFilter("warnings")} className={cn( "flex items-center gap-1 text-sm transition-colors", filter === "warnings" ? "text-warning" : "text-muted-foreground hover:text-warning" )} > <AlertTriangle className="h-3 w-3" /> Warnings ({stats.warnings}) </button> <button onClick={() => setFilter("info")} className={cn( "flex items-center gap-1 text-sm transition-colors", filter === "info" ? "text-info" : "text-muted-foreground hover:text-info" )} > <Info className="h-3 w-3" /> Info ({stats.info}) </button> </div> <div className="relative"> <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" /> <input type="text" placeholder="Search messages..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className={cn( "w-[200px] pl-9 pr-4 py-1.5 text-sm rounded-md border bg-background", "focus:outline-none focus:ring-2 focus:ring-primary/50", "placeholder:text-muted-foreground" )} /> </div> </div> <div className="flex-1 overflow-y-auto divide-y"> {filteredMessages.map((message) => { const isExpanded = expandedMessages.includes(message.id); return ( <div key={message.id} className={cn( "group transition-colors duration-200", isExpanded ? "bg-muted/50" : "hover:bg-muted/50" )} > <button onClick={() => toggleMessage(message.id)} className="w-full text-left p-4 flex items-start gap-3" > {getMessageIcon(message.type)} <div className="flex-1 min-w-0"> <div className="flex items-center gap-2"> <span className="font-medium text-sm">{message.message}</span> </div> {message.path && ( <div className="flex items-center gap-2 mt-1 text-sm text-muted-foreground"> <span className="font-mono">{message.path}</span> {message.line && <span>Line {message.line}</span>} {message.column && <span>Column {message.column}</span>} </div> )} </div> <ChevronRight className={cn( "h-4 w-4 text-muted-foreground transition-transform duration-200", isExpanded && "rotate-90" )} /> </button> {isExpanded && message.source && ( <div className="px-11 pb-4"> <div className="relative"> <pre className="p-3 rounded-md bg-muted font-mono text-xs overflow-x-auto">{message.source}</pre> <div className="absolute top-2 right-2 flex items-center gap-1"> <button onClick={() => navigator.clipboard.writeText(message.source)} className="p-1 rounded-md hover:bg-background/50 text-muted-foreground hover:text-foreground" > <Copy className="h-3 w-3" /> </button> {message.path && ( <button onClick={() => { /* TODO: Implement jump to source */ }} className="p-1 rounded-md hover:bg-background/50 text-muted-foreground hover:text-foreground" > <ExternalLink className="h-3 w-3" /> </button> )} </div> </div> </div> )} </div> ); })} </div> </div> ); }; export default ValidationPanel;
