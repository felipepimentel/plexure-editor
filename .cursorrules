# STRUCTURE.md

## File Information [P0]

Location: `./STRUCTURE.md`
Purpose: Central source of truth for project structure and code generation guidelines
Priority: P0 (Critical)
Project: Plexure Editor

### File Usage
This file must be:
- Named exactly as "STRUCTURE.md"
- Located in the project root directory
- Referenced as the single source of truth for project structure
- Maintained with each project modification

## Component Registry [P0]

### Current Registry
```yaml
registered_components:
  preview:
    path: components/preview
    purpose: "Editor preview component handling Monaco editor integration"
    files:
      - name: index.tsx
        purpose: "Public exports and type definitions"
      - name: preview.tsx
        purpose: "Main preview component implementation"
        dependencies:
          - monaco-editor
          - EditorToolbar
          - ErrorPanel
      - name: preview.test.tsx
        purpose: "Test suite for preview component"
    subcomponents:
      - PreviewHeader
      - PreviewContent
      - PreviewFooter
    related_components:
      - EditorToolbar
      - ErrorPanel
    consumers:
      - Editor.tsx
      - ProjectView.tsx

  projects:
    path: components/projects
    purpose: "Project management and visualization components"
    files:
      # [Add actual project files structure]

  editor:
    path: components/editor
    purpose: "Main editor functionality"
    files:
      - name: Editor.tsx
        purpose: "Core editor component"
        dependencies:
          - monaco-editor
          - EditorToolbar
      - name: EditorToolbar.tsx
        purpose: "Editor controls and actions"
    
  # [Add all other existing components with similar detail]
```

## Directory Structure [P0]

### Root Structure
```
project-root/
├── src/
│   ├── components/        # React components
│   │   ├── editor/       # Editor components
│   │   │   ├── Editor.tsx
│   │   │   └── EditorToolbar.tsx
│   │   ├── preview/      # Preview components
│   │   │   └── Preview.tsx
│   │   └── ui/          # Shared UI
│   ├── hooks/           # React hooks
│   ├── utils/           # Utilities
│   └── stores/          # State management
├── STRUCTURE.md         # This file
└── package.json
```

### Component Structure
```yaml
component_structure:
  required_files:
    - index.tsx          # Public API
    - {Component}.tsx    # Implementation
    - types.ts          # Type definitions
    - test.tsx          # Tests
  
  optional_files:
    - styles.ts         # Component styles
    - utils.ts         # Component utilities
    - constants.ts     # Component constants
```

## Implementation Rules [P0]

### Component Generation Steps
```typescript
interface ComponentGeneration {
  /** @generation_steps
   * @required: true
   */
  steps: {
    1: "Check ComponentRegistry";
    2: "Validate Location";
    3: "Check Dependencies";
    4: "Generate Files";
    5: "Update Registry";
  }
}
```

### Location Validation
```yaml
location_validation:
  steps:
    - check_registry:
        purpose: "Prevent duplicates"
        action: "Compare with existing"
    
    - validate_path:
        purpose: "Ensure correct location"
        action: "Verify directory structure"
    
    - check_dependencies:
        purpose: "Validate relationships"
        action: "Verify imports"
```

## Real-Time Validation [P0]

### Integration Checks
```yaml
integration_checks:
  dependencies:
    - validate_imports:
        check: "Import paths exist"
        action: "Report invalid imports"
    
    - check_circular:
        check: "Circular dependencies"
        action: "Prevent cycles"
  
  components:
    - validate_props:
        check: "Prop types match"
        action: "Report mismatches"
    
    - check_context:
        check: "Context usage"
        action: "Verify providers"
```

## Component Composition [P0]

### Patterns
```yaml
composition_patterns:
  atomic:
    atoms:
      path: "components/ui"
      examples: ["Button", "Input"]
    
    molecules:
      path: "components/ui"
      examples: ["Form", "Card"]
    
    organisms:
      path: "components/features"
      examples: ["Header", "Sidebar"]
```

### Feature Integration
```yaml
feature_integration:
  rules:
    - validate_boundaries:
        check: "Feature isolation"
        action: "Prevent coupling"
    
    - check_dependencies:
        check: "Feature dependencies"
        action: "Manage relationships"
```

## State Management [P0]

### Store Structure
```typescript
interface StoreStructure {
  /** @store_rules
   * @framework: zustand
   */
  stores: {
    name: string;
    state: StateDefinition;
    actions: ActionDefinition[];
  }
}
```

### Context Management
```yaml
context_management:
  rules:
    - provider_location:
        path: "src/providers"
        naming: "{Feature}Provider"
    
    - context_usage:
        validation: "Check provider existence"
        scope: "Verify context boundaries"
```

## Version Control [P0]

### Component Versioning
```yaml
version_control:
  tracking:
    major:
      - breaking_changes
      - api_modifications
    
    minor:
      - new_features
      - enhancements
    
    patch:
      - bug_fixes
      - performance_improvements
```

### Change Management
```yaml
change_management:
  documentation:
    - location: "with_component"
    - format: "changelog.md"
    - required: true
  
  validation:
    - check_breaking_changes
    - update_consumers
    - verify_integration
```

## Documentation Requirements [P0]

### Component Documentation
```typescript
interface Documentation {
  /** @documentation_rules
   * @required: true
   */
  sections: {
    purpose: string;
    props: PropDefinition[];
    usage: Example[];
    dependencies: string[];
  }
}
```

### Code Examples
```yaml
example_requirements:
  basic_usage:
    - purpose: "Show default usage"
    - code: "Working example"
  
  variations:
    - purpose: "Show component variants"
    - code: "Different prop combinations"
```

## Error Prevention [P0]

### Common Issues
```yaml
error_prevention:
  checks:
    - duplicate_components:
        detection: "Registry scan"
        action: "Prevent creation"
    
    - wrong_location:
        detection: "Path validation"
        action: "Suggest correct path"
    
    - missing_files:
        detection: "Template check"
        action: "Generate missing"
```

### Resolution Steps
```yaml
resolution_steps:
  duplicate:
    1: "Identify existing component"
    2: "Suggest reuse/extension"
    3: "Document decision"
  
  wrong_location:
    1: "Determine correct location"
    2: "Move component"
    3: "Update imports"
```

## Generation Response Format [P0]

### Response Structure
```typescript
interface GenerationResponse {
  /** @response_format
   * @version: string
   */
  metadata: {
    request_id: string;
    status: 'success' | 'error' | 'warning';
    messages: string[];
  };
  
  implementation?: {
    files: {
      path: string;
      content: string;
      type: 'component' | 'type' | 'test';
    }[];
  };
  
  validation: {
    passed: boolean;
    issues: Issue[];
    suggestions: string[];
  };
}
```

## Summary

This document:
1. Maintains accurate component registry
2. Prevents component duplication
3. Enforces consistent structure
4. Ensures proper documentation
5. Validates implementations
6. Manages versioning

All code generation must strictly follow these guidelines.